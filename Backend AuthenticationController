using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using BTU_Matrices.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace BTU_Matrices.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthenticationController : ControllerBase
    {
        private readonly DbWebttcSqlContext _context;

        public AuthenticationController(DbWebttcSqlContext context)
        {
            _context = context;
        }

        // GET: api/<AuthenticationController>
        [EnableCors("AllowClient")]
        [Authorize]
        [HttpGet]
        public IActionResult GetUser()
        {
            try
            {
                var name = User.Identity.Name.Split('\\')[1].ToString();
                var exist = (from p in _context.BtuPermisos.Where(x => x.UserName == name) select p).FirstOrDefault();
                if (exist != null)
                {
                    switch (exist.Rol)
                    {
                        case "ADMIN":
                            var user = new
                            {
                                usernt = name,
                                rol = 1
                            };
                            return Ok(user);

                            break;

                        case "AUXILIAR":
                            var user2 = new
                            {
                                usernt = name,
                                rol = 2
                            };
                            return Ok(user2);

                            break;

                        case "JEFE":

                            var user3 = new
                            {
                                usernt = name,
                                rol = 3
                            };
                            return Ok(user3);

                            break;

                        case "INSTRUCTOR":

                            var user4 = new
                            {
                                usernt = name,
                                rol = 4
                            };
                            return Ok(user4);

                            break;

                        case "ASOCIADO":

                            var user5 = new
                            {
                                usernt = name,
                                rol = 5
                            };
                            return Ok(user5);

                            break;

                        default:

                            return Ok(-1);




                    }



                    return Ok(1);
                }
                else
                {
                    return Ok(-1);
                }
            }
            catch (Exception ex)
            {
               return BadRequest(ex.Message);
            }
                
        }

        // GET api/<AuthenticationController>/5
        [HttpGet("{id}")]
        public string Get(int id)
        {
            return "value";
        }

        // POST api/<AuthenticationController>
        [HttpPost]
        public void Post([FromBody] string value)
        {
        }

        // PUT api/<AuthenticationController>/5
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] string value)
        {
        }

        // DELETE api/<AuthenticationController>/5
        [HttpDelete("{id}")]
        public void Delete(int id)
        {
        }
    }
}
